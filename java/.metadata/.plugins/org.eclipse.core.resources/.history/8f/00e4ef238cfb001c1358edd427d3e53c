package com.example.manualizer.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.example.manualizer.entity.Member;
import com.example.manualizer.dao.MemberDao;
//import com.example.manualizer.repository.MemberRepository;

@Service
public class MemberServiceImpl implements UserDetailsService {
	//DBからユーザ情報を検索するメソッドを実装
	@Component
	private MemberDao memberDao;
	
	@Override
	public UserDetails loadUserByUsername(String mail) throws UsernameNotFoundException{
		Member member = memberDao.findUser(mail);
		
		if (member == null) {
			throw new UsernameNotFoundException("Mail address : " + mail + " was not found in the database");
		}
		
		//権限のリスト
        //AdminやUserなどが存在するが、今回は利用しないのでUSERのみを仮で設定
        //権限を利用する場合は、DB上で権限テーブル、ユーザ権限テーブルを作成し管理が必要
		List<GrantedAuthority> grantList = new ArrayList<GrantedAuthority>();
		GrantedAuthority authority = new SimpleGrantedAuthority("USER");
		grantList.add(authority);
		
		//rawDataのパスワードを暗号化
		BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
		
		//MemberはインターフェースなのでMemberクラスのコンストラクタで生成したユーザオブジェクトをキャスト
		UserDetails userDetails = (UserDetails)new User(member.getMail(), encoder.encode(member.getPassword()),grantList);
		return userDetails;
	}
	
	

}
